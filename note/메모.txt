버전 업데이트하기 이전 체크리스트

- 디버깅용 코드 주석처리
- 데이터 버전 확인
- 프로그램 버전 업데이트


pyinstaller -F -w --clean -i="./resource/icon.ico" --add-data "resource;resource" SkillMacro.py
pyinstaller -w --clean -i="./resource/icon.ico" --add-data "resource;resource" SkillMacro.py

python==3.12.0
pyinstaller==6.5.0

UPX

데이터 버전
1 : 3.0.0 ~ 3.0.1
2 : 3.1.0 ~


   1      2      3      4      0   
#E57373#F44336#EF9A9A#FF8A65#EF9A9A
#81C784#2196F3#90CAF9#81D4FA#90CAF9
#64B5F6#FFEB3B#A5D6A7#80CBC4#A5D6A7
#BA68C8#4CAF50#FFF59D#FFD54F#FFEB3B
#FFD54F#FF9800#CE93D8#B39DDB#CE93D8
#4DB6AC#9C27B0#FFCC80#FFAB91#FFA386

전투력
#F38181#FCE38A#A7E6FF#95E1D3

#####
직업
#A0DEFF#FED0E9#ffa0a0#DFCCFB#FFCF96#97E7E1#CAF4FF#DCBFFF

전사류: 검호 / 매화
도적류: 살수 / 도제
법사류 : 술사 / 도사
궁수류 : 빙궁 / 귀궁
#####
* 직업 시스템에서 무기 수집형으로 바뀔 가능성 높음*


To-Do List

[완료]
- 스킬 연계를 스킬매크로 사용중에 활성화할지 비활성화할지 선택하는 버튼 만들기  # 스킬 선택 창
- 스킬 연계시 스킬 사용 횟수 설정  # 스킬 선택 창
- 스킬프레임 위에 매크로를 시작하면 사용될 스킬 순서 아이콘으로 표시
- 스킬 콤보에서 스킬 사용 횟수 설정  # 스킬 선택 창
- 스킬 연계설정 -> "우선사용"을 "단독사용"으로 교체
- 장착스킬 배경 흑백 -> 매크로 작동중이면 컬러
- 1세팅 -> 콤보여부를 단독사용으로 ( 콤보 사용 x는 콤보 횟수를 1로 설정하여 해결할 수 있음 ), 콤보 횟수 0 없애기
- 연계 유형 자동은 메인스킬에만 적용되는 것이 아니라 그 연계스킬에 포함된 모든 스킬에 적용
- 1세팅 -> 사용 순서를 우선순위로 변경 ( 우선순위는 여러 스킬이 사용 가능할 때, 우선순위가 높은 스킬이 더 늦게 활성화 됐더라도 낮은 스킬보다 먼저 사용되는 것을 의미)
- 스킬 장착시 자동 연계스킬 수동으로 변경
- 컨트롤 + T : 탭 추가
- 연계스킬 단축키로 사용하게
- 아이콘 제작
- 버프스킬은 매크로 시작하자마자 사용할지 선택 (스택 2짜리도 있음)
- 시뮬레이터에서 스킬 콤보마다 타수, 데미지계수 다른 것 구현
- 스탯 계산으로 얻은 전투력, 시뮬레이션으로 얻은 전투력 분리시키기

[미완료]
- 탭, 스킬 위치 이동  # (필수 x)
- 스킬 쿨타임 2배 모드 제작
- 인게임 데미지로 스텟 정상입력 확인
- 시뮬레이터 페이지에 시뮬레이션에서 사용할 입력 항목, 시뮬레이션 진행 버튼 추가: [몬스터 내공, 보스 내공, 포션 회복량]
- 연계스킬 사용키 없애는 기능 추가
- 매크로 스킬 설정 창 크기 조절하기

- annotation 위치는 항상 업데이트, 정보는 0.5초 단위로 업데이트
- matplotlib -> *pyqtgraph, *pyqtchart로 변경 => 브런치 나눠서 exe까지 만든다음 비교
- pyinstaller 사용할 때 UPX로 압축
- pyinstaller -> nuitka 사용
- CPU 바운드 작업 멀티프로세싱 사용 (폴더구조 정리 후)
- 파일/폴더 구조 정리
"""
project/
│
├── main.py          # 메인 실행 파일
├── requirements.txt # 필요한 패키지 목록
├── utils/           # 유틸리티 관련 코드
│   ├── file_handler.py
│   ├── data_processor.py
├── data/            # 데이터 파일
│   ├── input.csv
│   ├── output.csv
├── tests/           # 테스트 코드
│   ├── test_main.py
├── README.md        # 프로젝트 설명 파일
"""


데미지공식: 표기데미지 X (정확한 숫자는 아님, 공격력 <-> 파괴력 바뀌었을수도)
베이스 - 파괴력 * (공격력 * 0.005 + 1) * 직업계수 * 내공계수
임시   - 공격력 * (근력 + 지력) * (1 + 파괴력 * 0.01) * 내공계수


보스데미지 - [ 데미지(내공, 보뎀) ]
시뮬레이션 데미지 * (1 + 보스데미지 * 0.01) * 1.0

일반데미지 - [ 데미지(내공) ]
시뮬레이션 데미지 * 1.2

보스  -  [ 데미지(내공, 보뎀) & 체력,방어력,경도 & 회피 & 회복 ]
보스데미지 * (체력 * 방어력 * 경도 * 0.0000001 + (체력 * 자연회복율 + (1 + 포션회복 * 0.01) * 300) * 0.001) * (1 + 회피 * 0.01) * 0.7

사냥  -  [ 데미지(내공) & 경험치 & 운 & 상태이상저항 ]
일반데미지 * (1 + 운 * 0.01) * (1 + 상태이상저항 * 0.001) * (1 + 경험치 * 0.01) * 0.8


공격력	     100
방어력	     100
파괴력	     25
근력	        150
지력	        150
경도	        25
치확	        50
치뎀	        50
보스데미지 	  20
명중률        20
회피율	     20
상태이상저항   25
신속          10
체력	        2200
공격속도	      20
포션회복	      5
운             30
경험치	      5

데미지		보스데미지		일반데미지		보스		사냥	
58593.75		70312.5		70312.5		69925.78125		69682.9834	




#시뮬레이션

## 캐릭터 정보
### 스텟
### 스킬레벨

## 시뮬레이터
### 전투력
1. 보스데미지
2. 일반데미지
3. 보스
4. 사냥

### 수치 분석 - min, max, std(표준편차), p25, p50, p75
1. 초당 피해량
2. 총 피해량
(3. 초당 회복량)
(4. 총 회복량)

### 그래프 분석
1. DPS 분포 (1)
2. 스킬 DPS (연계스킬 포함, 원) (1)
3. 시간 경과에 따른 피해량 (2)
4. 누적 피해량 (2)
5. 스킬별 누적 기여도 (2)


## 스탯 계산기
### 스펙업 효율 계산기
### 추가 스펙업 계산기
### 잠재능력 계산기
### 잠재능력 옵션 순위표


## 캐릭터 카드
### 닉네임
### 캐릭터 선택
### 캐릭터 이미지
- 닉네임
- 직업
- 전투력